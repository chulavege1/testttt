{"version":3,"sources":["webpack:///./src/Code/Components/Content/Withdraw/WithdrawHeader.js","webpack:///./src/Code/Components/Content/Withdraw/WithdrawAmount.js","webpack:///./src/Code/Components/Content/Withdraw/Withdraw.js","webpack:///./src/Code/Components/base/UsdPrice/UsdPrice.js","webpack:///./src/Code/helpers/symbol_formated/numberWithPoints.js","webpack:///./src/Code/Components/Content/poolData-helpers/AaveAction.jsx","webpack:///./src/Code/Components/base/Transaction_status/Transaction_status.js"],"names":["Web3","require","WithdrawHeader","useContentContextState","setOnePoolDataState","userAccountData","setUserAccountData","assetDataOneReserves","ethToWeiProp","decimals","symbol","useParams","console","log","hpFactor","Number","BigNumber","healthFactor","_hex","toFixed","ROUND_DOWN","ltv","userCurrentAToken","_reserveCurrentBalanceData","currentATokenBalance","toString","useState","userBalance","setUserBalance","useEffect","utils","fromWei","isLoad","setIsLoad","className","substring","availableLiquidity","every2NumberPoint","WithdrawAmount","type","value","setValue","input","selectedProvider","web3Modal","injectedProvider","loadWeb3Modal","underluing","amount","max","signer","getSigner","actionTransactionDataState","setUserAssetDataContext","contracts","userAssetData","transactionReceipt","transactionHash","isMobile","useStaticPoolDataContext","setIsMobileWidthVersion","lendingPoolContract","LENDING_POOL_ADDRESS","placeholder","onChange","e","avalibleLiqudityLessTotalDebt","target","mathOptionWithDec","maxUserAmountToWithdraw","maxUserAmountToWithdrawFirstStep","setRepayMax","onClick","isNaN","amountWithdraw","setUserAmoutWithdraw","inputErorr","setInputError","timer","setTimeout","clearTimeout","assetDataOneReserveWithUserInfoBalances","underlyingBalance","usageAsCollateralEnabled","totalDebtETH","totalCollateralToWithdrawInETH","bigNumberValueConverted","minus","gt","reserveLiquidation","liquidationThreshold","multipliedBy","div","min","dividedBy","priceOracle","amountToWithdraw","displayAmountToWithdraw","eq","totalCollateralInETHAfterWithdraw","valueToBigNumber","totalCollateralETH","liquidationThresholdAfterWithdraw","currentLiquidationThreshold","healthFactorAfterWithdraw","amountToWithdrawInEth","calculateHealthFactorFromBalancesBigUnits","lt","allowanceState","setAllowance","getAllowanceStatus","a","tokenContract","ethers","Contract","IErc20","getAddress","address","allowance","_allowance","repayMax","totalDebtIsZero","history","toNumber","useHistory","status","AaveRouteActions","classNameChild","Icon","showImg","showSpan","symbolChild","directory","Transaction_status","action","UsdPrice","tableBool","offUsdSymbols","valueCalculate","currentBalanceForUserTokenChildInWei","_transactionHash","push","AaveAction","buttonClassNameChild","divWrapperClassNameChild","assetData","amountFromRouteUrl","swapModeEnabled","BalanceIsStatus","walletBalanceInHumanityDecimals","undefined","PlzConnectWalletMan","React","memo","Withdraw","setPoolDataState","length","assetsActiveLength","setSymbol","location","useLocation","exact","path","component","resultPriceFromOracleInUsdCurrentUserBalance","priceOracleETH","setPriceOracleETH","valCalcPriceOracle","x","replace","assetPrice","setLiveAsset","lendingPool","usageAsCollateral","styleChild","apyType","borrowType","repayMode","apyTypeM","setApyTypeM","buttonText","setButtonText","setTransactionHash","handleModalOk","userAmountSumm","toWei","_amount","_address","erc20TokenContract","_referralCode","deposit","tokenAddress","hash","withdraw","borrow","repay","setUserUseReserveAsCollateral","swapBorrowRateMode","stableRateLastUpdated","approve","modal","onMouseEnter","onMouseLeave","style","position","top","left","background","color","key","width","rel","href","window","ethereum","chainId"],"mappings":"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","file":"js/6.index.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useParams } from \"react-router-dom\";\nlet Web3 = require('web3');\nimport UsdPrice from '../../base/UsdPrice/UsdPrice';\n\nimport { formatUnits, formatEther } from \"@ethersproject/units\"\n\nimport {every2NumberPoint} from '~HELPERS/symbol_formated/numberWithPoints';\nimport BigNumber from \"bignumber.js\";\n//\n// import { useStaticPoolDataContext } from '~GRAPHQL/static_graph-pool-data-provider_formated';\nimport { useContentContextState } from '~/Code/Components/content_context';\n//\nconst WithdrawHeader = ({  }) => {\n//\n    const { setOnePoolDataState, setUserAccountData } = useContentContextState()\n    const { userAccountData } = setUserAccountData\n    const { assetDataOneReserves } = setOnePoolDataState\n\n    let ethToWeiProp = +assetDataOneReserves?.decimals === 18 ? 'ether'\n        : +assetDataOneReserves?.decimals === 6\n            ? 'mwei'\n            : 'gwei'\n\n\tlet { symbol } = useParams();\n    console.log('userOneReservezzzzzzz', assetDataOneReserves )\n//\n    let hpFactor =  Number(BigNumber(userAccountData?.healthFactor._hex + '0000000000').toFixed(2, BigNumber.ROUND_DOWN));\n    let ltv = new BigNumber(userAccountData?.ltv._hex)\n//\n    let userCurrentAToken = assetDataOneReserves?._reserveCurrentBalanceData.currentATokenBalance.toString()\n    let decimals = +assetDataOneReserves?.decimals\n    const [userBalance, setUserBalance] = useState()\n    useEffect(() => {\n        if( assetDataOneReserves ){\n            if(decimals === 18) {\n                setUserBalance(Number(Web3.utils.fromWei(userCurrentAToken, 'ether')));\n            } else if(decimals === 8 ) {\n                setUserBalance(Web3.utils.fromWei((userCurrentAToken + '0'), 'gwei'));\n            } else if(decimals === 6) {\n                setUserBalance(Web3.utils.fromWei(userCurrentAToken, 'mwei'));\n            }\n        }\n    }, [assetDataOneReserves])\n\n    // Animation.\n\tconst [isLoad, setIsLoad] = useState(false)\n\tuseEffect(() => {\n\t\tsetIsLoad(true)\n\t}, [])\n\n    \n    \n    return (\n        <div className={`${ isLoad && assetDataOneReserves ? 'active_block' : 'hidden_block' }`}>\n        { <>\n        {/* // <!-- card-top --> */}\n        <div className=\"card__top card-top\">\n            <div className=\"card-top__left\">\n                <div className=\"value\">Additional information</div>\n            </div>\n        </div>\n\n        {/* // <!-- card-content --> */}\n        <div className=\"card-top__content\">\n            <div className=\"top-content__body top-content__body--withdraw\">\n                <div className=\"top-content__col top-content__col--balance\">\n                    <div className=\"label label--md mb-5\">Your balance in Centes </div>\n                    <div className=\"title\">\n                        {\n                            userBalance \n                                ? Number(userBalance).toFixed(4)\n                                : '-'\n                        }\n                        { userBalance && <span className=\"remainder\">{symbol}</span> } \n                    </div>\n                </div>\n\n                <div className=\"top-content__col\">\n                    <div className=\"label label--md mb-5\">\n                        Health factor:\n                        {/* <button className=\"label__info info\">\n                            <svg className=\"icon icon--info\">\n                            </svg>\n                        </button> */}\n                    </div>\n                    <div className=\"title title--green\">{\n                        ( hpFactor && userAccountData ) && hpFactor.toString() !== '1.15792089237316195423570985008687907853269984665640564039457584007913129639935e+77'\n                            ? Number(hpFactor.toString().substring(0, 10)).toFixed(2)\n                            : '-'\n                    }</div>\n                </div>\n\n                <div className=\"top-content__col\">\n                    <div className=\"label label--md mb-5\">\n                        Available liqudity\n                    </div>\n                    <div className=\"title title--green\">{assetDataOneReserves ?\n                        Number(Web3.utils.fromWei(assetDataOneReserves.availableLiquidity.toString(), ethToWeiProp)).toFixed(4)\n                        : '-'\n                    }</div>\n                </div>\n\n                <div className=\"top-content__col\">\n                    <div className=\"label label--md mb-5\">\n                        Loan to value:\n                    </div>\n                    <div className=\"title\">{userAccountData && every2NumberPoint(ltv.toString().substring(0, 4)) + \" %\" }</div>\n                </div>\n\n                {/* <div className=\"top-content__col top-content__col--linebar\">\n                    <div className=\"label label--md mb-16\">\n                        Collateral composition\n                    </div>\n                    <div className=\"line-bar\">\n                        <div className=\"line-bar__wrapper\">\n                            <div className=\"line-bar__line\"></div>\n                            <div className=\"line-bar__fill line-bar__fill--dark\" ></div>\n                        </div>\n                    </div>\n                </div> */}\n\n            </div>\n        </div>\n        </> \n        }\n        </div>\n    )\n}\n\n\n\nexport default WithdrawHeader","import React, { useState, useEffect } from 'react';\nimport { useHistory, useParams, Link } from \"react-router-dom\";\n\nlet Web3 = require('web3');\nimport { ethers } from \"ethers\";\nimport {\n\tcalculateHealthFactorFromBalancesBigUnits,\n\tvalueToBigNumber,\n} from '@aave/protocol-js';\n// React context.\nimport { useStaticPoolDataContext } from '~GRAPHQL/static_graph-pool-data-provider_formated';\nimport { useContentContextState } from '~/Code/Components/content_context';\n\nimport BalanceIsStatus from '../../base/failures/BalanceIsStatus'\nimport PlzConnectWalletMan from '../../base/failures/PlzConnectWalletMan'\nimport Loader from '~BASE/loader/loader'\n\nimport AaveRouteActions from '../poolData-helpers/AaveRouteActions';\nimport AaveAction from '../poolData-helpers/AaveAction'\n//\nimport Icon from '../../base/icon/Icon';\nimport UsdPrice from '~BASE/UsdPrice/UsdPrice';\nimport { abi as IErc20 } from '~ABIs/abis/erc20.json'\n//\nimport BigNumber from \"bignumber.js\";\nimport Transaction_status from '~BASE/Transaction_status/Transaction_status'\n\n//\nconst WithdrawAmount = ({ selectedProvider, web3Modal, injectedProvider, loadWeb3Modal }) => {\n//\n    let { underluing, symbol, amount, max } = useParams();\n    let signer = selectedProvider?.getSigner();\n// Context\n    //\n    const { \n        actionTransactionDataState,\n        setUserAccountData,\n        setUserAssetDataContext, setOnePoolDataState,\n        contracts\n     } = useContentContextState();\n\tconst { assetDataOneReserves } = setOnePoolDataState\n    const { userAssetData } = setUserAssetDataContext\n    const { userAccountData } = setUserAccountData\n\n\tconst { transactionReceipt, transactionHash } = actionTransactionDataState\n\n\n    const { setIsMobileWidthVersion } = useStaticPoolDataContext()\n\tconst { isMobile } = setIsMobileWidthVersion\n\n    // console.log('userAuserAssetDatassetData', assetDataOneReserves && userAccountData && (Number(Web3.utils.fromWei(assetDataOneReserves?.availableLiquidity.toString(), 'ether'))) < Number(Web3.utils.fromWei(userAccountData?.totalDebtETH.toString(), 'ether')))\n\n    const { lendingPoolContract, LENDING_POOL_ADDRESS } = contracts\n\n// component state.\n    const [amountWithdraw, setUserAmoutWithdraw] = useInput({ className: 'amount__input', type: 'number' })\n    const [amountWithdrawAll, setUserAmoutWithdrawAll] = useState(false)\n    const [inputErorr, setInputError] = useState()\n//\n    useEffect(() => {\n        if(inputErorr === true){\n            const timer = setTimeout(() => {\n                setInputError(false);\n            }, 400);\n                return () => clearTimeout(timer);\n        }   \n    }, [inputErorr])\n//\nconsole.log('dasdasddasdasdasdasdasdasdas', amountWithdraw)\n    let avalibleLiqudityLessTotalDebt = (assetDataOneReserves && userAccountData) &&\n        (Number(Web3.utils.fromWei(assetDataOneReserves?.availableLiquidity.toString(), 'ether'))) \n        < Number(Web3.utils.fromWei(assetDataOneReserves?._reserveCurrentBalanceData.currentATokenBalance.toString(), 'ether'))\n    let mathOptionWithDec = +assetDataOneReserves?.decimals === 18 ? 'ether' : +assetDataOneReserves?.decimals === 8 ? 'gwei' : 'mwei'\n    const assetDataOneReserveWithUserInfoBalances = userAssetData?.[symbol]\n\tconst underlyingBalance  = assetDataOneReserveWithUserInfoBalances?.currentATokenBalance.toString()\n\n    let ethToWeiProp = +assetDataOneReserves?.decimals === 18 ? 'ether'\n\t\t: +assetDataOneReserves?.decimals === 6\n\t\t\t? 'mwei'\n\t\t\t: 'gwei'\n\n    let maxUserAmountToWithdraw\n    let maxUserAmountToWithdrawFirstStep = assetDataOneReserves &&\n        Web3.utils.fromWei(assetDataOneReserves?._reserveCurrentBalanceData.currentATokenBalance.toString(), ethToWeiProp)\n\n// Max variable for user can to withdraw.\n\tif (\n\t\tassetDataOneReserveWithUserInfoBalances?.usageAsCollateralEnabled &&\n\t\tassetDataOneReserves?.usageAsCollateralEnabled &&\n\t\tWeb3.utils.fromWei(userAccountData.totalDebtETH.toString(), 'ether') !== '0' &&\n\t\tuserAccountData\n\t)  {\n\t\t// if we have any borrowings we should check how much we can withdraw without liquidation\n\t\t// with 0.5% gap to avoid reverting of tx\n\t\tlet totalCollateralToWithdrawInETH = new BigNumber('0');\n\t\tlet bigNumberValueConverted = new BigNumber(userAccountData?.healthFactor._hex);\n\t\tbigNumberValueConverted = Web3.utils.fromWei(userAccountData?.healthFactor._hex.toString(), 'ether');\n\t\tbigNumberValueConverted = new BigNumber(bigNumberValueConverted).minus('1');\n\t\tif (bigNumberValueConverted.gt('0')) {\n\t\t\tlet reserveLiquidation = (+('0.' + assetDataOneReserves?.liquidationThreshold.toString())).toFixed(2)\n\t\t\t\n\t\t\treserveLiquidation = reserveLiquidation.toString()\n\t\t\t// console.log('step6', (reserveLiquidation))\n\t\t\ttotalCollateralToWithdrawInETH = bigNumberValueConverted\n\t\t\t.multipliedBy(Web3.utils.fromWei(userAccountData.totalDebtETH.toString(), 'ether'))\n\t\t\t// because of the rounding issue on the contracts side this value still can be incorrect\n\t\t\t.div(reserveLiquidation)\n\t\t\t.multipliedBy('0.99'); \n\t\t\t// 950771\n\t\t}\n        \n\t\tmaxUserAmountToWithdraw = BigNumber.min(\n\t\t\tmaxUserAmountToWithdrawFirstStep,\n\t\t\ttotalCollateralToWithdrawInETH.dividedBy(Web3.utils.fromWei(assetDataOneReserves.priceOracle.toString(), 'ether'))\n\t\t).toString();\n\n\t}\n\n//amountToWithdraw\n\tlet amountToWithdraw = new BigNumber(amountWithdraw || 0);\n\tlet displayAmountToWithdraw = new BigNumber(amountWithdraw || 0);\n\t\n\tif (amountToWithdraw.eq('-1') && userAccountData && userAssetData) {\n\t\tif (Web3.utils.fromWei(userAccountData.totalDebtETH.toString(), 'ether') !== '0') {\n\t\t\tif (!maxUserAmountToWithdraw.eq(underlyingBalance)) {\n\t\t\t\tamountToWithdraw = maxUserAmountToWithdraw;\n\t\t\t} \n\t\t} \n\t\tdisplayAmountToWithdraw = maxUserAmountToWithdraw;\n\t} \n//\n\tlet blockingError = '';\n\tlet totalCollateralInETHAfterWithdraw = userAccountData && valueToBigNumber(Web3.utils.fromWei(userAccountData.totalCollateralETH.toString(), 'ether'));\n\tlet liquidationThresholdAfterWithdraw = userAccountData && ('0.' + userAccountData?.currentLiquidationThreshold.toString());\n\tlet healthFactorAfterWithdraw = userAccountData && valueToBigNumber(userAccountData?.healthFactor._hex);\n//\n\tif (assetDataOneReserveWithUserInfoBalances?.usageAsCollateralEnabled && assetDataOneReserves?.usageAsCollateralEnabled) {\n\t\tconst amountToWithdrawInEth = assetDataOneReserves && displayAmountToWithdraw?.multipliedBy(\n\t\t\t// '0.0005176'\n\t\t\tWeb3.utils.fromWei(assetDataOneReserves.priceOracle.toString(), 'ether')\n\t\t);\n\n\t\ttotalCollateralInETHAfterWithdraw =\t\n\t\t\ttotalCollateralInETHAfterWithdraw.minus(amountToWithdrawInEth);\n\n\t\tliquidationThresholdAfterWithdraw = valueToBigNumber(Web3.utils.fromWei(userAccountData.totalCollateralETH.toString(), 'ether'))\n\t\t\t.multipliedBy( '0.' + userAccountData?.currentLiquidationThreshold.toString())\n\t\t\t.minus(\n\t\t\t\tvalueToBigNumber(amountToWithdrawInEth).multipliedBy(\n\t\t\t\t\t(+('0.' + assetDataOneReserves?.liquidationThreshold.toString())).toFixed(2)\t\t\t\t)\n\t\t\t)\n\t\t\t.div(totalCollateralInETHAfterWithdraw)\n\t\t\t.toFixed(4, BigNumber.ROUND_DOWN);\n\n\t\thealthFactorAfterWithdraw = calculateHealthFactorFromBalancesBigUnits(\n\t\t\ttotalCollateralInETHAfterWithdraw,\n\t\t\tWeb3.utils.fromWei(userAccountData.totalDebtETH.toString(), 'ether'),\n\t\t\tliquidationThresholdAfterWithdraw\n\t\t);\n\t\t//\n\t\tif (healthFactorAfterWithdraw.lt('1') && Web3.utils.fromWei(userAccountData.totalDebtETH.toString(), 'ether') !== '0') {\n\t\t\tblockingError = 'Error! errorCanNotWithdrawThisAmount';\n\t\t}\n\t}\n    maxUserAmountToWithdraw = assetDataOneReserves && Number(maxUserAmountToWithdraw).toFixed(+assetDataOneReserves.decimals)\n    maxUserAmountToWithdrawFirstStep = assetDataOneReserves && Number(maxUserAmountToWithdrawFirstStep).toFixed(+assetDataOneReserves.decimals)\n    \n    // Check if need approve.\n\tconst [allowanceState, setAllowance] = useState();\n\tconst getAllowanceStatus = async () => {\n\t\tlet tokenContract = new ethers.Contract(underluing, IErc20, signer);\n\t\tlet address = await signer.getAddress()\n\t\tlet _allowance = await tokenContract.allowance(address, LENDING_POOL_ADDRESS)\n        console.log('_allowance', _allowance)\n\t\tsetAllowance(_allowance)\n\t}\n\tuseEffect(() => {\n\t\tgetAllowanceStatus()\n\t}, [selectedProvider] )\n\n\n//      //////////////////////////////////////\n//     let maxUserAmountToWithdraw\n//     let maxUserAmountToWithdrawFirstStep = \n//     assetDataOneReserves && BigNumber.min(\n//         Web3.utils.fromWei( \n//             (+assetDataOneReserves.decimals === 8 \n//                 ? (assetDataOneReserves?._reserveCurrentBalanceData.currentATokenBalance.toString() + '0') \n//                 : assetDataOneReserves?._reserveCurrentBalanceData.currentATokenBalance.toString()\n//             ), \n//             (+assetDataOneReserves.decimals === 18 \n//                 ? 'ether' \n//                 : +assetDataOneReserves.decimals === 8 \n//                     ? 'gwei'  : 'mwei'\n//             )\n//         ),\n//         assetDataOneReserves?.availableLiquidity.toString()\n//     );\n    \n\n// // Max variable for user can to withdraw.\n//     if (\n//         userAccountData &&\n//         totalDebtIsZero \n//     ) {\n//             // if we have any borrowings we should check how much we can withdraw without liquidation\n//             // with 0.5% gap to avoid reverting of tx\n//             let totalCollateralToWithdrawInETH = new BigNumber('0');\n//             let bigNumberValueConverted =  new BigNumber(userAccountData?.healthFactor._hex);\n//             bigNumberValueConverted = Web3.utils.fromWei(bigNumberValueConverted.toString(), 'ether');\n\n//             bigNumberValueConverted = new BigNumber(bigNumberValueConverted).minus('1');\n//             // console.log('bigNumberValueConverted', bigNumberValueConverted)\n//             if (bigNumberValueConverted.gt('0')) {\n//                 let reserveLiquidation = (+('0.' + assetDataOneReserves?.liquidationThreshold.toString())).toFixed(2)\n                \n//                 reserveLiquidation = reserveLiquidation.toString()\n//                 console.log('vavavavavava', reserveLiquidation)\n//                 // console.log('step6', (reserveLiquidation))\n//                 totalCollateralToWithdrawInETH = bigNumberValueConverted\n//                 .multipliedBy(Web3.utils.fromWei(userAccountData.totalDebtETH.toString(), 'ether'))\n//                 // because of the rounding issue on the contracts side this value still can be incorrect\n//                 .div(reserveLiquidation)\n//                 .multipliedBy('0.99'); \n//                 // 950771\n//             }\n\n//             // console.log('maxUserA32323', Web3.utils.fromWei(0.0005176.reserve.price.priceInEth.toString(), 'ether') )\n\n//             // console.log('maxUserAmountToWithdraw222222222', totalCollateralToWithdrawInETH.dividedBy('0.0005176', 'ether') )\n            \n//             maxUserAmountToWithdraw = assetDataOneReserves && BigNumber.min(\n//                 maxUserAmountToWithdrawFirstStep,\n//                 totalCollateralToWithdrawInETH.dividedBy(Web3.utils.fromWei(assetDataOneReserves.priceOracle.toString(), 'ether'))\n//             ).toString();\n//             console.log('maxUserAmountToWithdrawzxczxc', maxUserAmountToWithdraw?.toString())\n\n//         }\n\n//     maxUserAmountToWithdraw = BigNumber.max(Number(maxUserAmountToWithdraw), 0).toString()\n//     maxUserAmountToWithdraw = assetDataOneReserves && Number(maxUserAmountToWithdraw).toFixed(+assetDataOneReserves.decimals)\n//     console.log('maxUserAmountToWithdrawtest', maxUserAmountToWithdraw)\n \nconst [repayMax, setRepayMax] = useState(false)\n\n    const [isLoad, setIsLoad] = useState(false)\n    useEffect(() => {\n        setIsLoad(true)\n    }, [])\n\n//\n    function useInput({ className, type }) {\n        const [value, setValue] = useState(amount);\n        // console.log('111111', value )\n        const input = <>\n            <input  \n                className={className} \n                value={value} \n                placeholder='Amount'\n                type={type} \n                onChange={e => setValue(\n                    avalibleLiqudityLessTotalDebt\n                        ? Number(e.target.value) > Number(Web3.utils.fromWei(assetDataOneReserves?.availableLiquidity.toString(), mathOptionWithDec))\n                            ? Number(Web3.utils.fromWei(assetDataOneReserves?.availableLiquidity.toString(), mathOptionWithDec))\n                            : e.target.value\n                        : maxUserAmountToWithdraw // Max how use can withdraw is defined?\n                            ? Number(e.target.value) > maxUserAmountToWithdraw\n                                ? maxUserAmountToWithdraw.toString()\n                                : e.target.value\n                            : Number(e.target.value) > Number(maxUserAmountToWithdrawFirstStep.toString()) \n                                ? maxUserAmountToWithdrawFirstStep.toString()\n                                : e.target.value,\n                    setRepayMax(false)\n                )\n                \n            } \n            />\n            <button \n                className='amount__btn' \n                type=\"withdrawAll\"\n                onClick={e => {\n                    setValue(maxUserAmountToWithdrawFirstStep && assetDataOneReserves \n                        && !avalibleLiqudityLessTotalDebt\n                            ? maxUserAmountToWithdraw && !isNaN(maxUserAmountToWithdraw)\n                                ? maxUserAmountToWithdraw\n                                : maxUserAmountToWithdrawFirstStep.toString()\n                            : Web3.utils.fromWei(assetDataOneReserves?.availableLiquidity.toString(), mathOptionWithDec)\n                    )\n                    setRepayMax(maxUserAmountToWithdraw === maxUserAmountToWithdrawFirstStep \n                        ? true \n                        : isNaN(maxUserAmountToWithdraw)\n                            ? true\n                            : false\n                    )\n                }}>Max\n            </button>\n        </>\n        return [value, input];\n    }\n//  \n\n    let totalDebtIsZero = userAccountData && Web3.utils.fromWei(userAccountData.totalDebtETH.toString(), 'ether') === '0';\n    const isHealthFactorGreen = totalDebtIsZero &\n        totalDebtIsZero && healthFactorAfterWithdraw.toNumber() >= 1.50;\n    const isHealthFactorDangerous = totalDebtIsZero &&\n        totalDebtIsZero && healthFactorAfterWithdraw.toNumber() >= 1.20;\n\n    const history = useHistory();\n\n\n    console.log('injectedProvidadasdasdaser', assetDataOneReserves && Number(maxUserAmountToWithdrawFirstStep).toFixed(0))\n    return (\n        assetDataOneReserves && Number(maxUserAmountToWithdrawFirstStep).toFixed(0) !== 0\n            ?\n        <>\n            \n            <div className={`${ isLoad && assetDataOneReserves ? 'active_block' : 'hidden_block' }`}>\n            <div className={`${transactionReceipt.status === 1 ? 'borderGreen' : ''} col card grow-1`}>\n                <div className=\"card__content card__content--md p-60-24 m-auto\">\n\n                    <AaveRouteActions type={'back'} classNameChild={\"btn btn--red btn--small\"} />\n\n                    <Icon\n                        showImg={true} \n                        showSpan={false} \n                        symbolChild={symbol} \n                        directory={'/assets-main'} \n                    />\n\n                    <Transaction_status \n                        action={'Withdraw'}\n                    />\n\n                    <div className=\"detail__body mb-40\">\n                \n                        <div className='grid-row grid-row--mb-20 mt-50'>\n                            {transactionReceipt.status === 1\n                                ? ''\n                                : <>\n\n                                { !isMobile &&\n                                    <div className='grid-row__left flex-col'>\n                                        <div className='label label--md'>{amount ? 'Amount' :'Available to withdraw'}</div>\n                                    </div>\n                                }\n                                \n                                <div className='grid-row__right'>\n                                    \n                                    <div className='flex-col'>\n                                        { isMobile &&\n                                            <div className='label label--md'>{amount ? 'Amount' :'Available to withdraw'}</div>\n                                        }\n                                        <div className='value'>\n                                            {\n                                                amount \n                                                    ? amount\n                                                    : !avalibleLiqudityLessTotalDebt\n                                                        ? maxUserAmountToWithdrawFirstStep.toString()\n                                                        : Web3.utils.fromWei( assetDataOneReserves?.availableLiquidity.toString(), mathOptionWithDec )\n                                                // maxUserAmountToWithdrawFirstStep && assetDataOneReserves \n                                                //     && !avalibleLiqudityLessTotalDebt\n                                                //         ? maxUserAmountToWithdraw && !isNaN(maxUserAmountToWithdraw)\n                                                //             ? (maxUserAmountToWithdraw  + ' ' + symbol)\n                                                //             : (maxUserAmountToWithdrawFirstStep.toString()  + ' ' + symbol)\n                                                //         : Web3.utils.fromWei(assetDataOneReserves?.availableLiquidity.toString(), mathOptionWithDec)\n                                            }\n                                        </div>\n                                        <div >\n                                            { assetDataOneReserves && \n                                                <UsdPrice \n                                                    tableBool={true} \n                                                    offUsdSymbols={false} \n                                                    valueCalculate={assetDataOneReserves?.priceOracle.toString()} \n                                                    decimals={+assetDataOneReserves?.decimals}  \n                                                    selectedProvider={selectedProvider} \n                                                    // Web3.utils.toWei(maxUserAmountToWithdraw.toString().substring(0, +assetDataOneReserves.decimals), ethToWeiProp)\n                                                    currentBalanceForUserTokenChildInWei={\n                                                        amount\n                                                            ? amount\n                                                            : !avalibleLiqudityLessTotalDebt\n                                                                ? maxUserAmountToWithdrawFirstStep.toString()\n                                                                : Web3.utils.fromWei( assetDataOneReserves?.availableLiquidity.toString(), mathOptionWithDec )\n                                                    } \n                                                />\n                                            }\n                                        </div>\n                                    </div>\n                                    \n                                </div>\n                                \n                               \n                               \n                                </>\n                            }\n\n                            {/* {transactionReceipt.status === 1 \n                                ? ''\n                                : \n                                <div className='grid-row__right'>\n                                    <div className={` ${ !totalDebtIsZero\n                                        ? isHealthFactorGreen \n                                            ? 'value--green'\n                                            : isHealthFactorDangerous \n                                                ? 'color-yellow'\n                                                : 'color-red'\n                                        : null\n                                        }`}>\n                                            {userAccountData && userAccountData.healthFactor.toString() !== '115792089237316195423570985008687907853269984665640564039457584007913129639935'\n                                                ? assetDataOneReserveWithUserInfoBalances?.usageAsCollateralEnabled \n                                                    ? healthFactorAfterWithdraw.toString()\n                                                    : !assetDataOneReserveWithUserInfoBalances?.usageAsCollateralEnabled && 'No'\n                                                : '-'\n                                            }\n                                    </div>\n                                </div>\n                            } */}\n\n                            \n                        </div>\n\n                        {transactionHash?._transactionHash &&\n                            <div className=\"grid-row grid-row--mb-40 mt-30\">\n                                <div className=\"grid-row__base\">\n                                    <div className=\"progress\">\n                                        <ul className={`progress__steps \n                                            ${ transactionReceipt.status === 1\n                                                ? 'step-3'\n                                                : transactionHash?._transactionHash\n                                                    ? 'step-2'\n                                                    : 'step-1'\n                                        }`}>    \n                                                <li></li>\n                                                <li></li>\n                                                <li></li>\n                                                <li></li>\n                                                <li></li>\n                                        </ul>\n\n                                        <ul className=\"progress__labels\">\n                                            {allowanceState && allowanceState.toString() !== '0' \n                                                ? '' \n                                                : <li className=\"label--md label--dark\">Approve</li>}\n                                            \n                                                    <li className=\"label--md label--dark\">Withdraw</li>\n                                                    <li className=\"label--md label--dark\">Finished</li>\n                                        </ul>\n\n                                    </div>\n                                </div>\n                            </div>\n                        }\n                        \n                        {transactionReceipt.status === 1 || transactionHash?._transactionHash\n                            ? ''\n                            :\n                            <div className=\"grid-row__base\">\n                                <div className={`amount mb-40 ${inputErorr ? `ahashakeheartache` : ''}`}>\n                                    {setUserAmoutWithdraw}\n                                </div>\n                                    { assetDataOneReserves && amountWithdraw &&\n                                        <UsdPrice \n                                            classNameChild={'posa'}\n                                            tableBool={true} \n                                            offUsdSymbols={false} \n                                            valueCalculate={assetDataOneReserves?.priceOracle.toString()} \n                                            decimals={+assetDataOneReserves?.decimals}  \n                                            selectedProvider={selectedProvider} \n                                            // Web3.utils.toWei(maxUserAmountToWithdraw.toString().substring(0, +assetDataOneReserves.decimals), ethToWeiProp)\n                                            currentBalanceForUserTokenChildInWei={\n                                                amountWithdraw ? amountWithdraw : amount\n                                            } \n                                        />\n                                    }\n                            </div>\n                        }\n\n                            \n\n                        <div className='df mt-40 width100'>\n\n                            <div className='grid-row__right'>\n                                {allowanceState && allowanceState.toString() === '0' \n                                    ? <div className='grid-row__right'>\n                                        <div className=\"\">Approve</div>\n                                        <p className='label label--wrap'>Please approve before withdraw.</p>\n                                    </div> \n                                    : <div className='grid-row__right'>\n                                        <div className='flex-column'>\n                                            {transactionReceipt.status === 1 ? null : <div className=\"\">Withdraw</div>}\n                                            <p className='label label--wrap'>\n                                                { transactionReceipt.status === 1 ? 'You transaction has succefull' : transactionHash?._transactionHash ? 'Wait you transaction has sent' : 'Submit to withdraw'}\n                                            </p>\n                                        </div>\n                                    </div>\n                                }\n                            </div>\n\n                            { amount !== amountWithdraw &&\n                                <div className='grid-row__right'>\n                                    <button \n                                        className='btn btn--red btn--small ' \n                                        onClick={ () => { \n                                            typeof(amountWithdraw) !== 'undefined' && +amountWithdraw !== 0 \n                                                ? history.push(`/withdraw/${symbol}/${underluing}/${amountWithdraw}${repayMax ? '/-1' : ''}`)\n                                                : setInputError(true)\n                                            } }>\n                                        Continue\n                                    </button>\n                                </div>\n                            }\n\n                                {transactionHash?._transactionHash\n                                    ? <Loader /> \n                                    : amountWithdraw && amount && amount === amountWithdraw && transactionReceipt.status !== 1\n                                        && \n                                        <div className='grid-row__left a-end'>\n                                            <AaveAction\n                                                type=\"withdraw\"\n                                                buttonClassNameChild=\"btn btn--red btn--small\"\n                                                divWrapperClassNameChild='text-center'\n                                                assetData={assetDataOneReserves}  \n                                                signer={signer} \n                                                lendingPoolContract={lendingPoolContract} \n                                                amountFromRouteUrl={max?.toString() === '-1' ? '-1' : amount}\n                                                userAccountData={userAccountData}\n                                                swapModeEnabled={false}\n                                                selectedProvider={selectedProvider}\n                                                // userAssetData={userAssetData[assetData.ymbol]} \n                                            />\n                                        </div>\n                                }\n                            \n                        </div> \n                    </div>\n                </div>\n            </div>\n        </div>\n        \n        </>\n    : !injectedProvider\n        ? <PlzConnectWalletMan \n            loadWeb3Modal={loadWeb3Modal} \n            web3Modal={web3Modal} \n         />  \n        : <BalanceIsStatus\n            walletBalanceInHumanityDecimals={\n                maxUserAmountToWithdrawFirstStep !== undefined || maxUserAmountToWithdraw !== undefined\n                    ?\n                        maxUserAmountToWithdrawFirstStep === 0\n                            ? 0\n                            : 0 \n                    : undefined\n            }\n            selectedProvider={selectedProvider} \n            web3Modal={web3Modal} \n            action={'withdraw'}\n        />\n\n\n\n\n    )\n}\n\n\n\nexport default React.memo(WithdrawAmount)","import React, { useState, useEffect, useRef } from 'react'\r\n// Context\r\nimport { useContentContextState } from '~/Code/Components/content_context';\r\nimport { useLocation, useParams, Switch, Route } from \"react-router-dom\";\r\n//\r\nimport WithdrawHeader from './WithdrawHeader';\r\nimport WithdrawAmount from './WithdrawAmount';\r\n// import WithdrawSubmit from './WithdrawSubmit';\r\n\r\n//\r\nconst Withdraw = ({ selectedProvider, web3Modal, loadWeb3Modal, injectedProvider }) => {\r\n// Context && route\r\n\tconst { symbol } = useParams()\r\n\tconst { setOnePoolDataState, setPoolDataState } = useContentContextState();\r\n\tconst { assetData } = setPoolDataState\r\n// set active symbol.\r\n\tuseEffect(() => {\r\n\t\tif(assetData?.length === setPoolDataState.assetsActiveLength && setOnePoolDataState.assetDataOneReserves?.symbol !== symbol){\r\n\t\t\tsetOnePoolDataState.setSymbol(symbol)\r\n\t\t}\r\n\t}, [assetData] )\r\n//\r\n\tlet location = useLocation();    \r\n//\r\n\treturn (\r\n\t\t<>\r\n\r\n\t\t\t<div className='main active'>\r\n\t\t\t\t<div className='dashboard active'>\r\n\t\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t\t<div className=\"dashboard__body row-flex flex-col\">\r\n\r\n\t\t<div className=\"col card mb-30\">\r\n\t\t\t<WithdrawHeader selectedProvider={selectedProvider} />\r\n\t\t</div>\r\n\r\n\t\t<Switch location={location}>\r\n\r\n\t\t\t<Route exact path='/withdraw/:symbol/:underluing/:amount?/:max?' \r\n\t\t\t\tcomponent={() => (\r\n\t\t\t\t\t<WithdrawAmount \r\n\t\t\t\t\t\tinjectedProvider={injectedProvider}\r\n\t\t\t\t\t\tselectedProvider={selectedProvider} \r\n\t\t\t\t\t\tweb3Modal={web3Modal}\r\n\t\t\t\t\t\tloadWeb3Modal={loadWeb3Modal}\r\n\t\t\t\t\t/> \r\n\t\t\t\t)}\r\n\t\t\t/>\r\n\t\t\t\r\n\t\t\t{/* <Route path={`/withdraw/:symbol/:underluing/:amount?` } component={() => ( \r\n\t\t\t\t<WithdrawSubmit lendingPool={lendingPool} selectedProvider={selectedProvider} \r\n\t\t\t\t/> )} \r\n\t\t\t/> */}\r\n\t\t\t\r\n\t\t</Switch>\r\n\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t</>\r\n\t)\r\n}\r\n\r\n\r\n\r\nexport default React.memo(Withdraw)","import React from 'react';\nimport { useContentContextState } from '~/Code/Components/content_context';\n//\nlet Web3 = require('web3');\n// Props Api example.\n    // tableBool={true} decimals={value.decimals} currentBalanceForUserTokenChildInWei={token.balancee}\n    // offUsdSymbols={false} valueCalculate={value.price.priceInEth} selectedProvider={selectedProvider}\n//\nconst UsdPrice = ({\n    classNameChild,\n    valueCalculate, \n    tableBool, \n    offUsdSymbols,\n    currentBalanceForUserTokenChildInWei,\n}) => {\n// Context.\n    const { setPriceOracleETH } = useContentContextState();\n    const { priceOracleETH } = setPriceOracleETH\n//\n    let resultPriceFromOracleInUsdCurrentUserBalance;\n//\n    if(priceOracleETH) {\n        console.log('valCalcPriceOracle', priceOracleETH)\n        // Token price.\n        let valCalcPriceOracle = valueCalculate\n            ? Web3.utils.fromWei(valueCalculate.toString(), 'ether') \n            : 0\n        let activePriceForOneToken = valCalcPriceOracle * priceOracleETH\n\n        // Result for token price.\n        resultPriceFromOracleInUsdCurrentUserBalance = currentBalanceForUserTokenChildInWei // Gives prop with current balance? .\n            ? Number((currentBalanceForUserTokenChildInWei) * activePriceForOneToken).toFixed(2) // Active balance for ETH.\n            : Number(priceOracleETH * valCalcPriceOracle).toFixed(2) // Balance for ETH. \n        //\n    }\n\n//\n    return (\n        <div className={ classNameChild ? classNameChild : '' }>\n            {/* / / */}\n                { tableBool && '$ '}\n            {/* / / */}\n            { \n                // window?.ethereum.chainId === \"0x4\"\n                //     ? valueCalculate.length <= 18 ? resultFormatedValueForOneToken : resultPriceFromOracleInUsdCurrentUserBalance\n                //     : \n                resultPriceFromOracleInUsdCurrentUserBalance \n            }\n            {/* / / */}\n                { !tableBool && offUsdSymbols === undefined ? ' USD' : offUsdSymbols && ' USD' }\n            {/* / / */}\n        </div>\n    )\n//\n}\n\n\n//\nexport default React.memo(UsdPrice)","// Point every two characters.\nfunction every2NumberPoint(x) {\n    return x.toString().replace(/\\B(?=(\\d{2})+(?!\\d))/g, \".\");\n}\nfunction every3NumberCommas(x) {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\n}\n\n\n\nexport { every2NumberPoint, every3NumberCommas }\n\n","import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport { parseUnits, formatUnits } from \"@ethersproject/units\";\nimport { ethers } from \"ethers\";\nimport { abi as IErc20 } from '~ABIs/abis/erc20.json';\n// Context.\nimport { useStaticPoolDataContext } from '~GRAPHQL/static_graph-pool-data-provider_formated';\nimport { useContentContextState } from '~/Code/Components/content_context';\n\n\nlet Web3 = require('web3');\nimport Loader from '~BASE/loader/loader'\n//\nfunction AaveAction({ swapModeEnabled, amountFromRouteUrl, assetData, signer, type, assetPrice, setLiveAsset, lendingPool, \n  buttonClassNameChild, usageAsCollateral, styleChild, \n  lendingPoolContract, apyType, borrowType, repayMode, usageAsCollateralEnabled }) {\n// - Block data.\n  // const { \n  //   userAccountData, \n  // } = useAaveData({ selectedProvider });\n  // - Context data\n// Get data from route.\n  let { underluing } = useParams();\n  // const [transactingError, setTransactingError] = useState(false)\n  const [apyTypeM, setApyTypeM] = useState()\n  useEffect(() => { setApyTypeM(apyType) }, [apyType])\n  // const [amount] = useState(amountFromRouteUrl)\n  const [buttonText, setButtonText] = useState()\n  useEffect(() => { setButtonText(apyType) }, [apyType])\n\n  // const [useMax, setUseMax] = useState(false)\n  // const [runningTransactions, setRunningTransactions] = useState()\n\n// Text status transaction\n  const { \n    actionTransactionDataState\n  } = useContentContextState()\n  const { \n    setTransactionHash, \n    transactionHash \n  } = actionTransactionDataState\n\n  const { LENDING_POOL_ADDRESS } = useStaticPoolDataContext()\n\n  //\n\t//\n\t\n//\n  const handleModalOk = async () => {\n    // let decimal = (assetData.decimals === 18) ? 'ether' : (assetData.decimals === 6) ? 'mwei' : 'gwei';\n    let mathOptionWithDec = +assetData.decimals === 18 ? 'ether' : +assetData.decimals === 8 ? 'gwei' : 'mwei'\n    let userAmountSumm = amountFromRouteUrl && Web3.utils.toWei(amountFromRouteUrl.toString(), mathOptionWithDec) // !!! FIX THERE !!!!!! 10 ** (17, PAST THERE FIX)!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    let _amount = amountFromRouteUrl?.toString() === \"-1\" ? \n        type === 'withdraw'\n          ? '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n          : '0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF' \n      : userAmountSumm\n\n    let _address = await signer.getAddress()\n    let erc20TokenContract = underluing && new ethers.Contract(underluing, IErc20, signer);\n    let hash\n    let _referralCode = '0'.toString()\n\n    if(type === \"deposit\") {\n      hash = await lendingPoolContract.deposit(assetData.tokenAddress, _amount, _address, _referralCode)\n    } if(type === \"withdraw\") {\n      hash = await lendingPoolContract.withdraw(assetData.tokenAddress, _amount, _address)\n    } if(type === \"borrow\") {\n      hash = await lendingPoolContract.borrow(assetData.tokenAddress, _amount, borrowType, 0, _address )\n    } if(type === \"repay\") {\n      hash = await lendingPoolContract.repay(assetData.tokenAddress, _amount, repayMode, _address)\n    } if(type === \"usage-as-collateral\" && usageAsCollateralEnabled) {\n      hash = await lendingPoolContract.setUserUseReserveAsCollateral(assetData.tokenAddress, !usageAsCollateral)\n    } if(type === \"swap-borrow-rate\") {\n      hash = await lendingPoolContract.swapBorrowRateMode(assetData.tokenAddress, assetData._reserveCurrentBalanceData.stableRateLastUpdated === 0 ? '2' : '1')\n    } if(type === \"approve\") {\n      hash = await erc20TokenContract.approve(LENDING_POOL_ADDRESS, _amount)\n    }\n\n    let _newAssetData = {};\n    let _transactionHash = hash.hash\n    _newAssetData = {_transactionHash, type}\n    setTransactionHash(_newAssetData)\n  };\n\n\n  let modal = (\n    <>\n\n      <div \n        onMouseEnter={() => { setButtonText(!apyType) }}\n        onMouseLeave={() => { setButtonText(!buttonText) }}\n        className={\n          usageAsCollateralEnabled || type === 'swap-borrow-rate'\n            ? apyTypeM\n              ? 'switch switch--green right' \n              : 'switch switch--green flex-end'         \n            : 'switch flex-center' \n        }\n      >\n\n\n        { transactionHash?._transactionHash\n          ? <div style={{position: 'absolute', top: '15px', left: '15px'}}> <Loader /> </div> \n          : null\n        }\n        \n        {/* {transactionStatus ? <div style={{height: '0px', width: '75px'}}><img /><Confirmed /></div> : null} */}\n\n        <button\n          className={buttonClassNameChild}\n          style={{\n            background: type === 'swap-borrow-rate' \n              ? buttonText \n                ? 'var(--switch-green)' \n                : 'var(--btn-blue)'\n              : '' ,\n              color: '#fff'\n          }}\n          key=\"submit\"\n          type={type}\n          onClick={handleModalOk}\n        >\n          {!swapModeEnabled\n            ? type\n\n              : type === 'usage-as-collateral'\n                ? buttonText && usageAsCollateralEnabled\n                  ? 'Yes' \n                  : 'No'\n                  \n\n            : type === 'swap-borrow-rate'\n          }\n        </button>\n\n        {/* {transactingSubmit === false && <ModalStatusTransaction type={type} statusCode={transctionInfo} message='asd' />} */}\n\n      </div> \n\n    </>\n  )\n  //\n  return (\n    <>\n      { modal }\n    </>\n  )\n  //\n}\n\nexport default React.memo(AaveAction);\n","import React from 'react'\n\nimport { useContentContextState } from '~/Code/Components/content_context';\n\n//\nconst Transaction_status = ({\n    action,\n}) => {\n\n    const { \n\t\tactionTransactionDataState,\n\t} = useContentContextState();\n\tconst { transactionReceipt, transactionHash } = actionTransactionDataState\n\n    console.log('transactionHtransactionHashash', transactionReceipt)\n    console.log('2222', transactionHash)\n\n\n  return (\n\n        transactionReceipt?.status === 1 \n            ?\n            <div className=\"detail__top mb-40 text-center\">\n                <h2 className=\"title mb-20\">\n                    {action} confirmed\n                </h2>\n                <p className='description mb-20'>\n                    Wiew transaction info   \n                </p>\n                <a \n                    style={{width: '100%'}} \n                    className='text-center' \n                    target=\"_blank\" \n                    rel=\"nofollow\" \n                    href={ \n                        window.ethereum?.chainId === \"0x38\" \n                            ? 'https://bscscan.com/tx/'\n                            : 'https://polygonscan.com/tx/' \n                        + transactionReceipt?.transactionHash\n                    }\n                >\n                    Etherscan\n                </a>\n            </div>\n               \n\n            : <div className=\"detail__top mb-40 text-center\">\n                  <h2 className=\"title mb-20\">\n                      {action} overview\n                  </h2>\n                  <p className=\"description\">\n                      These are your transaction details. Make sure to check if this is correct before submitting.\n                  </p>\n              </div>\n    \n  )\n\n\n}\n\nexport default Transaction_status"],"sourceRoot":""}