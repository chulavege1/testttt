{"version":3,"sources":["webpack:///./src/Code/Components/Content/Market/Market.jsx"],"names":["Markett","isMobile","useStaticPoolDataContext","setIsMobileWidthVersion","useContentContextState","setPoolDataState","setUserAccountData","setReserveTokensContext","assetData","reserveTokens","userAccountData","useState","displayCurrency","columns","includes","useMemo","Header","accessor","value","showImg","showSpan","symbolChild","symbol","directory","RAY","resultForAprSumm","liquidityRate","toString","depositAPR","Number","toFixed","style","width","justifyContent","display","sorter","a","b","parseFloat","formatUnits","sortDirections","stableBorrowAPR","stableBorrowRate","variableBorrowAPR","variableBorrowRate","className","isActive","type","classNameChild","columns2","position","right","top","Table","useCallback","data","filterable","useTable","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","state","visibleColumns","preGlobalFilteredRows","setGlobalFilter","isLoad","setLoaded","useEffect","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps","length"],"mappings":"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","file":"js/11.index.js","sourcesContent":["import React, { useEffect, useMemo, useState, useCallback } from 'react'\nimport { useTable, useSortBy } from \"react-table\";\n// Web3.\nimport { formatUnits, formatEther } from \"@ethersproject/units\";\n// \nimport Web3 from 'web3'\n// Components.\nimport AaveRouteActions from \"../poolData-helpers/AaveRouteActions\"\nimport { useStaticPoolDataContext } from '~GRAPHQL/static_graph-pool-data-provider_formated';\nimport { useContentContextState } from '~/Code/Components/content_context';\n//\nimport Icon from '../../base/icon/Icon'\nimport Loader from '~BASE/loader/loader'\nimport RedrawTimer from '~BASE/RedrawTimer/RedrawTimer'\n// \nconst Markett = () => {\n//\n  const { setIsMobileWidthVersion } = useStaticPoolDataContext()\n  const { isMobile } = setIsMobileWidthVersion\n\n  const { setPoolDataState, setUserAccountData,  setReserveTokensContext } = useContentContextState();\n  const { assetData } = setPoolDataState\n  const { reserveTokens } = setReserveTokensContext\n  const { userAccountData } = setUserAccountData\n//\n\n  const [showActiveAssets, setShowActiveAssets] = useState(false);\n  const [displayCurrency, setDisplayCurrency] = useState('native');\n  \n\n  let ethPrice = '4632.22'\n  let convertNative = ['USD','ETH'].includes(displayCurrency)\n  let showUsdPrice = (ethPrice && displayCurrency === 'USD')\n\n \n  const columns = useMemo(\n    () => [\n      {\n        Header: 'Token',\n        accessor: value => <>\n          <Icon showImg={true} showSpan={true} symbolChild={value.symbol} directory={'/assets-main'} />\n        </> \n          //   sorter: (a, b) => convertValue(a.liquidityRate, a.decimals, convertNative?formatEther(a.price.priceInEth):1) - convertValue(b.availableLiquidity, b.decimals, convertNative?formatEther(b.price.priceInEth):1),\n\n      },\n\n      // {\n      //   Header: 'Total borrowed' + (convertNative?` (${displayCurrency})` : ''),\n      //   accessor: value => (every3NumberCommas(lazyround(formattedValue(value.totalCurrentVariableDebt, value.decimals, convertNative ? formatEther(value.price.priceInEth) : 1, showUsdPrice, ethPrice)))),\n      //   sorter: (a, b) => convertValue(a.liquidityRate, a.decimals, convertNative?formatEther(a.price.priceInEth):1) - convertValue(b.availableLiquidity, b.decimals, convertNative?formatEther(b.price.priceInEth):1),\n      //   sortDirections: ['descend', 'ascend'],\n      // },\n      {\n        Header: 'Deposit APR',\n        accessor: value => {\n          let RAY = 10 ** 27\n          let resultForAprSumm = value.liquidityRate.toString()\n          let depositAPR = Number((+resultForAprSumm / RAY )) === 0 \n            ? '0' \n            : Number(+resultForAprSumm / RAY * 100).toFixed(4) \n          return isMobile \n            ? <div style={{ width: '100%', justifyContent: 'space-between', display: 'flex' }}>\n                <span>Deposit APR</span>\n                <span>{depositAPR} %</span>\n              </div>\n            : depositAPR + ' %'\n        },\n        sorter: (a,b) => parseFloat(formatUnits(a.liquidityRate, 25)) - parseFloat(formatUnits(b.liquidityRate, 25)),\n        sortDirections:['descend', 'ascend']\n      },\n\n      {\n        Header: 'Stable APR',\n        accessor: value => {\n          let RAY = 10**27 // 10 to the power 27\n          let stableBorrowAPR = Number((value.stableBorrowRate) / RAY) === 0\n            ? '0'\n            : Number((value.stableBorrowRate) / RAY * 100).toFixed(4)\n\n          return isMobile \n            ? <div style={{ width: '100%', justifyContent: 'space-between', display: 'flex' }}>\n              <span>Stable APR</span>\n              <span>{stableBorrowAPR} %</span>\n            </div>\n            : stableBorrowAPR + ' %'\n        },\n        sorter: (a,b) => parseFloat(formatUnits(a.stableBorrowRate, 25)) - parseFloat(formatUnits(b.stableBorrowRate, 25)),\n        sortDirections:['descend', 'ascend']\n      },\n      {\n        Header: 'Variable APR',\n        accessor: value => {\n          let RAY = 10**27 // 10 to the power 27\n          let variableBorrowAPR = Number((value.variableBorrowRate) / RAY) === 0\n            ? '0'\n            : Number((value.variableBorrowRate) / RAY * 100).toFixed(4)\n\n          return isMobile\n            ? <div style={{ width: '100%', justifyContent: 'space-between', display: 'flex' }}>\n              <span>Variable APR</span>\n              <span>{variableBorrowAPR} %</span>\n            </div> \n            : variableBorrowAPR + ' %'\n        },\n        sorter: (a,b) => parseFloat(formatUnits(a.variableBorrowRate, 25)) - parseFloat(formatUnits(b.variableBorrowRate, 25)),\n        sortDirections:['descend', 'ascend']\n      },\n      \n      \n      // {\n      //   Header: 'Deposited' + (convertNative?` (${displayCurrency})`:''),\n      //   accessor: value => (userAssetData[value.symbol] && userAssetData[value.symbol]['currentATokenBalance'])&&formattedValue(userAssetData[value.symbol]['currentATokenBalance'], value.decimals, convertNative?formatEther(value.price.priceInEth):1, showUsdPrice, ethPrice),\n      // },\n      // {\n      //   Header: 'Stable Debt' + (convertNative?` (${displayCurrency})`:''),\n      //   accessor: value => (userAssetData[value.symbol] && userAssetData[value.symbol]['currentATokenBalance'])&&formattedValue(userAssetData[value.symbol]['currentATokenBalance'], value.decimals, convertNative?formatEther(value.price.priceInEth):1, showUsdPrice, ethPrice),\n      // },\n      // {\n      //   Header: 'Variable Debt' + (convertNative?` (${displayCurrency})`:''),\n      //   accessor: value => (userAssetData[value.symbol])&&formattedValue(userAssetData[value.symbol]['currentVariableDebt'], value.decimals, convertNative?formatEther(value.price.priceInEth):1, showUsdPrice, ethPrice),\n      // },\n      \n      {\n        Header: 'Actions',\n        accessor: value => {\n          return ( <>\n          <div className='doubleButtons'>\n            {isMobile ? 'Actions' : ' '}\n              {\n               value.isActive && \n               <div className='flex-columnPremobile'>\n                <AaveRouteActions \n                  type={\"deposit\"} \n                  classNameChild=\"zInd btn btn--red btn--small\" \n                  assetData={value} \n                /> \n                <AaveRouteActions \n                  type={\"reserve-overwiew\"} \n                  classNameChild=\"reserve-button\" \n                  assetData={value} \n                /> \n                <AaveRouteActions \n                  type={\"borrow\"} \n                  classNameChild=\"zInd btn btn--blue btn--small\" \n                  assetData={value} \n                /> \n                </div>\n                }\n            </div>\n          </> )\n          \n        }\n      },\n\n    ]\n  )\n\n\n  const columns2 = useMemo(\n    () => [\n\n      {\n        Header: ' ',\n        accessor: value => <div style={{position: 'absolute', right: '55%', top: '50%'}}> <Loader /> </div>,\n      },\n      \n    ]\n  )\n\n  const Table = useCallback(({ columns, data, filterable }) => {\n    // Use the state and functions returned from useTable to build your UI\n    const {\n      getTableProps,\n      getTableBodyProps,\n      headerGroups,\n      rows,\n      prepareRow,\n      state,\n      visibleColumns,\n      preGlobalFilteredRows,\n      setGlobalFilter,\n    } = useTable({ columns, data },\n      useSortBy       \n    )\n    \n\n    const [isLoad, setLoaded] = useState()\n\n      useEffect(() => {\n          setLoaded(true)\n      }, [])\n\n    return (\n      <div className=\"container\">\n        <div className={`${ isLoad ? 'active_block' : 'hidden_block' }`}>\n\n        <RedrawTimer />\n        <div className=\"dashboard__body flex-col\">\n\n    <div className='col--12 grow-1'>\n      <div className='table table--sliding'>\n          <table className='table' {...getTableProps()} >\n            {!isMobile ?\n              <thead>\n                {headerGroups.map(headerGroup => (\n                  <tr className='table-header__body'  {...headerGroup.getHeaderGroupProps()}>\n                    {headerGroup.headers.map(column => (\n                      <th\n                        className='table-header__col'\n                        style={{ justifyContent: 'flex-start' }}\n                        { ...column.getHeaderProps(column.getSortByToggleProps()) }\n                      >\n                        {column.render('Header')}\n                          <span>\n                            {column.isSorted\n                              ? column.isSortedDesc\n                                ? '  🔽'\n                                : '  🔼'\n                              : ''\n                            }\n                          </span>\n                      </th>\n                    ))}\n                  </tr>\n                ))}\n              </thead>\n                : ''\n              }\n                <tbody {...getTableBodyProps()}>\n                  {rows.map(row => {\n                    prepareRow(row)\n                    return (\n                      <tr  className='table-item table-value table-value--dark mb-8' {...row.getRowProps()}>\n                        {row.cells.map(cell => {\n                          return (\n                            <td className='dataTables'\n                              {...cell.getCellProps()}\n                            >\n                              {cell.render('Cell')}\n                            </td>\n                          )\n                        })}\n                      </tr>\n                    )\n                  })}\n                </tbody>\n          </table>\n      </div>\n    </div>\n\n            </div>\n          </div>\n        </div>\n    )\n  }, []\n)\n\n  return (\n      \n    <>\n        <Table\n          data={\n            assetData?.length === 0 && reserveTokens\n              ? reserveTokens \n              : assetData\n          }\n          columns={assetData.length === 0 ? columns2 : columns} \n        />\n    </>\n\n  )\n\n}\n\n\nexport default Markett"],"sourceRoot":""}